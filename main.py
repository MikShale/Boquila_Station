import telebot
import threading
import time
from camera import setup_camera
from bme_280 import read_sensor_data, log_data_in_db
from conf import LOGS_DIR, TIME_FOR_SEND_DATA, TIME_FOR_SEND_LOGS
from logger import logger
from TOKEN import TOKEN
import os

bot = telebot.TeleBot(TOKEN)

# TODO: –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∫–∞–∫ dict {user_id: [username, is_described, is_in_log]} ?
# –°–µ–π—á–∞—Å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ subscribers[user_id] = username
subscribers = {}
log_viewers = {}

camera = setup_camera()

def send_updates():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –¥–∞–≤–ª–µ–Ω–∏—é –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –∞ —Ç–∞–∫–∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–æ–∫–µ–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ /start
    """
    while True:
        if subscribers:
            temperature, humidity, pressure = read_sensor_data()
            photo_filename = camera.capture_image()

            # TODO: BUG! –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ–∫ –≤ –ø–∞–ø–∫—É, –Ω–æ –ø–∏—à–µ—Ç —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç

            logger.debug(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ send_updates")

            for user_id in list(subscribers):
                try:
                    bot.send_photo(
                        user_id, photo_filename,
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"üìà –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n",
                    )
                    logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscribers.get(user_id)}: {e}")
        time.sleep(TIME_FOR_SEND_DATA)

def send_logs():
    last_logs = ""
    while True:
        try:
            with open(os.path.join(LOGS_DIR, "logs.log"), "r") as log_file:
                current_logs = log_file.read()
                if current_logs != last_logs:
                    for user_id in log_viewers:
                        bot.send_message(user_id, f"üìú –ù–æ–≤—ã–µ –ª–æ–≥–∏:\n{current_logs[len(last_logs):]}")
                    last_logs = current_logs
                    logger.debug(f"–õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")
        time.sleep(TIME_FOR_SEND_LOGS)

@bot.message_handler(commands=["start"])
def handle_start(message):

    user_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name

    if user_id not in subscribers:
        subscribers[user_id] = username
        bot.send_message(user_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    else:
        bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=["stop"])
def handle_stop(message):
    user_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    subscribers.pop(user_id, None)
    log_viewers.pop(user_id, None)
    bot.send_message(user_id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")


@bot.message_handler(commands=["logs"])
def handle_logs(message):
    user_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name

    if user_id not in log_viewers:
        log_viewers[user_id] = username
        bot.send_message(user_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–æ–≥–∏.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ª–æ–≥–∏")
    else:
        bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–æ–≥–∏.")


def main():
    threading.Thread(target=log_data_in_db, daemon=True).start()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CSV
    threading.Thread(target=send_updates, daemon=True).start()    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    threading.Thread(target=send_logs, daemon=True).start()       # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤
    logger.info("–ü–æ—Ç–æ–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.critical("–ü–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
